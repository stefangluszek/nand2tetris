// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /**
    * 15    12 11 10  9  8  7  6  5  4  3  2  1  0
    * i  xx a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    *
    * i
    * 0 A instruction
    * 1 C instruction
    *
    * d1  d2  d3
    * A   D   M
    */
    Mux16(a[0..14]=instruction[0..14], a[15]=false, b=ALUout,
            sel=instruction[15], out=toA);

    Not(in=instruction[15], out=notA);
    Or(a=notA, b=instruction[5], out=loadA);
    ARegister(in=toA, load=loadA, out=outA, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=outD);

    And(a=instruction[3], b=instruction[15], out=writeM);

    /*
     * zr True if out = 0
     * ng True if out < 0
    */
    ALU(x=outD, y=toALU, zx=instruction[11], nx=instruction[10],
            zy=instruction[9], ny=instruction[8], f=instruction[7],
            no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);

    And(a=instruction[12], b=instruction[15], out=AorM);
    Mux16(a=outA, b=inM, sel=AorM, out=toALU);

    And(a=instruction[15], b=instruction[2], out=lt0);
    And(a=ng, b=lt0, out=j1);

    And(a=instruction[15], b=instruction[1], out=eq0);
    And(a=zr, b=eq0, out=j2);

    And(a=instruction[15], b=instruction[0], out=gt0);
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=notzrng);
    And(a=notzrng, b=gt0, out=j3);

    Or(a=j1, b=j2, out=j12);
    Or(a=j12, b=j3, out=jump);

    PC(in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc,
        out[15]=false);
}
